/* 
Given a list of products (as an array of objects, as seen in productsData.js)
render a <Product /> component (which you'll also need to create) for each
product in the list.

Make sure to use the array's `.map()` method to create these components, and 
don't forget to pass a `key` prop to it to avoid the warning.
*/

import React from "react";
import Product from "./Product";
import productsData from "./vschoolProducts";

function App() {
    const productComponents = productsData.map(item => <Product product={item} key={item.id} name={item.name} price={item.price} description={item.description} /> )
    
  return (
    <div>
        <h1>List of products</h1>
        {productComponents}
    </div>
  )
}

export default App



------------------------------------------------------------------------------------------------------------------------------------

class based components 

class App extends React.Component {
    render() {
        return (
            <div>
                <h1>Code goes here</h1>
            </div>
        )
    }
}



class App extends React.Component {
    
    yourMethodHere() {
        
    }
    
    render() {
        return (
            <div>
                <h1>{this.props.whatever}</h1>
            </div>
        )
    }
}

export default App

------------------------------------------------------------------------------------------------------------------------------------
state practice 

import React from "react"

// https://scrimba.com/p/p4Mrt9/cQnMDHD

class App extends React.Component {
    constructor() {
        super()
        this.state = {
            answer: "Yes"
        }
    }
    
    render() {
        return (
            <div>
                <h1>Is state important to know? {this.state.answer}</h1>
                <ChildComponent answer={this.state.answer}/>
            </div>
        )
    }
}

export default App

------------------------------------------------------------------------------------------------------------------------------------


import React from "react"

class App extends React.Component {
    constructor() {
        super()
        this.state = {
            count: 0
        }
        this.handleClick = this.handleClick.bind(this)
    }
    
    handleClick() {
        this.setState({ count: 1 })
    }
    
    render() {
        return (
            <div>
                <h1>{this.state.count}</h1>
                <button onClick={this.handleClick}>Change!</button>
            </div>
        )
    }
}

export default App
------------------------------------------------------------------------------------------------------------------------------------


import React from "react"

class App extends React.Component {
    constructor() {
        super()
        this.state = {
            count: 0
        }
        this.handleClick = this.handleClick.bind(this)
    }
    
    handleClick() {
        this.setState(prevState => {
            return {
                check: prevState.count + 1
            }
        })
    }
    
    render() {
        return (
            <div>
                <h1>{this.state.count}</h1>
                <button onClick={this.handleClick}>Change!</button>
            </div>
        )
    }
}

export default App
------------------------------------------------------------------------------------------------------------------------------------

/**
 * Let's make it so our checkbox can actually mark our todo as complete or incomplete!
 * This challenge is a little more involved than some of the past ones. Check the comments 
 * in the code for some help on accomplishing this one
 * 
 * Challenge: 
 * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)
 *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part
 * 2. Pass the method down to the TodoItem component
 * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function
 */

import React from "react"
import TodoItem from "./TodoItem"
import todosData from "./todosData"

class App extends React.Component {
    constructor() {
        super()
        this.state = {
            todos: todosData
        }
        this.handleChange = this.handleChange.bind(this)
    }
    
    handleChange(id) {
        // Update state so that the item with the given id flips `completed` from false to true (or vise versa)
        
        // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. (Think how you might use the `.map` method to do this)
        this.setState(prevState => {
            const updatedTodos = prevState.todos.map(todo => {
                if (todo.id === id){
                    todo.completed = !todo.completed;
                }
                return todo;
            })
            return {
                todos:updatedTodos
            }
        })
    }
    
    render() {
        const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange}/>)
        
        return (
            <div className="todo-list">
                {todoItems}
            </div>
        )    
    }
}

export default App


import React from "react"

function TodoItem(props) {
    return (
        <div className="todo-item">
            <input 
                type="checkbox" 
                checked={props.item.completed} 
                onChange={(event) => props.handleChange(props.item.id)}
            />
            <p>{props.item.text}</p>
        </div>
    )
}

export default TodoItem

------------------------------------------------------------------------------------------------------------------------------------

life cycle methods 
import React, {Component} from "react"

// https://engineering.musefind.com/react-lifecycle-methods-how-and-when-to-use-them-2111a1b692b1
// https://reactjs.org/blog/2018/03/29/react-v-16-3.html#component-lifecycle-changes

class TodoList extends Component {
    constructor() {
        super()
        this.state = {}
    }
    
    componentDidMount() {
        // GET the data I need to correctly display
    }
    
    componentWillReceiveProps(nextProps) {
        if (nextProps.whatever !== this.props.whatever) {
            // do something important here
        }
    }
    
    shouldComponentUpdate(nextProps, nextState) {
        // return true if want it to update
        // return false if not
    }
    
    componentWillUnmount() {
        // remove event listener
        // teardown or cleanup your code before your component disappears
    }
    
    render() {
        return (
            <div>
                Code goes here
            </div>
        )
    }
}

export default App
-----------------------------------------

API data 

import React, {Component} from "react"


// https://swapi.co/ (old)
// https://swapi.dev/


class App extends Component {
    constructor() {
        super()
        this.state = {
            loading: false,
            character: {}
        }
    }
    
    componentDidMount() {
        this.setState({loading: true})
        fetch("https://swapi.co/api/people/1")
            .then(response => response.json())
            .then(data => {
                this.setState({
                    loading: false,
                    character: data
                })
            })
    }
    
    render() {
        const text = this.state.loading ? "loading..." : this.state.character.name
        return (
            <div>
                <p>{text}</p>
            </div>
        )
    }
}

export default App

        fetch("https://swapi.dev/api/people/1/")


import React, {Component} from "react"

// https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch
// https://swapi.co/
// https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261

class App extends Component {
    constructor() {
        super()
        this.state = {}
    }
    
    componentDidMount() {
        fetch("https://swapi.co/api/people/1")
            .then(response => response.json())
            .then(data => console.log(data))
    }
    
    render() {
        return (
            <div>
                Code goes here
            </div>
        )
    }
}

export default App

//save data by its state 

-----------------------------------------------------------------------------------------------------------------------
import React, {Component} from "react"

// https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch
// https://swapi.co/
// https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261

class App extends Component {
    constructor() {
        super()
        this.state = {
            character: {}
        }
    }
    
    componentDidMount() {
        fetch("https://swapi.co/api/people/1")
            .then(response => response.json())
            .then(data => {
                this.setState({
                    character: data
                })
            })
    }
    
    render() {
        return (
            <div>
                {this.state.character.name}
            </div>
        )
    }
}

export default App

-----------------------------------------------------------------
handle change functions 
change the state everytime the handle change is fired 
 
import React, {Component} from "react"

class App extends Component {
    constructor() {
        super()
        this.state = {
            firstName: ""
        }
    }
    
    handleChange(event) {
        this.setState({
            firstName: event.target.value
        })
    }
    
    render() {
        return (
            <form>
                <input type="text" placeholder="First Name" onChange={this.handleChange} />
            </form>
        )
    }
}

export default App


import React, {Component} from "react"

class App extends Component {
    constructor() {
        super()
        this.state = {
            firstName: "",
            lastName: ""
        }
        this.handleChange = this.handleChange.bind(this)
    }
    
    handleChange(event) {
        this.setState({
            [event.target.name]: event.target.value
        })
    }
    
    render() {
        return (
            <form>
                <input type="text" name="firstName" placeholder="First Name" onChange={this.handleChange} />
                <br />
                <input type="text" name="lastName" placeholder="Last Name" onChange={this.handleChange} />
                <h1>{this.state.firstName} {this.state.lastName}</h1>
            </form>
        )
    }
}

export default App

-------------------------------------------------------------------------------------------------

import React, {Component} from "react"

class App extends Component {
    constructor() {
        super()
        this.state = {
            firstName: "",
            lastName: ""
        }
        this.handleChange = this.handleChange.bind(this)
    }
    
    handleChange(event) {
        this.setState({
            [event.target.name]: event.target.value
        })
    }
    
    render() {
        return (
            <form>
                <input 
                    type="text" 
                    value={this.state.firstName} 
                    name="firstName" 
                    placeholder="First Name" 
                    onChange={this.handleChange} 
                />
                <br />
                <input 
                    type="text" 
                    value={this.state.lastName} 
                    name="lastName" 
                    placeholder="Last Name" 
                    onChange={this.handleChange} 
                />
                <h1>{this.state.firstName} {this.state.lastName}</h1>
            </form>
        )
    }
}

export default App

-------------------------------------------------------------------------------------------------

useState() hooks 

import React, {useState} from "react"

function App() {
    const [answer, ???] = useState("Yes")
    return (
        <div>
            <h1>Is state important to know? {answer}</h1>
        </div>
    )
}

// class App extends React.Component {
//     constructor() {
//         super()
//         this.state = {
//             answer: "Yes"
//         }
//     }
    
//     render() {
//         return (
//             <div>
//                 <h1>Is state important to know? {this.state.answer}</h1>
//             </div>
//         )
//     }
// }

export default App

-------------------------------------------------------------------------------------------------
useState()

import React, {useState} from "react"

// Convert the class below to a functional component that uses the useState hook to initalize a count vartiable to 0 and display the count on the screen.
// Don't worry about the part where the button changes the count quite yet, that's what you're here to learn about!

function App () {
    const [count, setCount] = useState(0); 
        return (
            <div>
                <h1>{count}</h1>
                <button onClick={() => setCount(prevCount => prevCount +1)} >Change!</button>
            </div>
        )
}

export default App

-------------------------------------------------------------------------------------------------
import React, {useState} from "react"

// Convert the class below to a functional component that uses the useState hook to initalize a count vartiable to 0 and display the count on the screen.
// Don't worry about the part where the button changes the count quite yet, that's what you're here to learn about!

function App () {
    const [count, setCount] = useState(0); 
    
    function increment(){
        setCount(prevCount => prevCount +1)
    }
        return (
            <div>
                <h1>{count}</h1>
                <button onClick={increment} >Change!</button>
            </div>
        )
}

export default App

-------------------------------------------------------------------------------------------------

import React, {useState} from "react"

// Convert the class below to a functional component that uses the useState hook to initalize a count vartiable to 0 and display the count on the screen.
// Don't worry about the part where the button changes the count quite yet, that's what you're here to learn about!

function App () {
    const [count, setCount] = useState(0); 
    
    function increment(){
        setCount(prevCount => prevCount +1)
    }
    function decrement(){
        setCount(prevCount => prevCount -1)
    }
        return (
            <div>
                <h1>{count}</h1>
                <button onClick={increment} >Increment!</button>
                <button onClick={decrement} >Decrement!</button>
            </div>
        )
}

export default App

-------------------------------------------------------------------------------------------------
import React, {useState} from "react"

// Convert the class below to a functional component that uses the useState hook to initalize a count vartiable to 0 and display the count on the screen.
// Don't worry about the part where the button changes the count quite yet, that's what you're here to learn about!

function App() {
    const [count, setCount] = useState(0)
    const [answer, setAnswer] = useState("Yes")
    
    function increment() {
        setCount(prevCount => prevCount + 1)
    }
    
    function decrement() {
        setCount(prevCount => prevCount - 1)
    }
        
    function double() {
        setCount(prevCount => prevCount * 2)
    }
    
    function half() {
        setCount(prevCount => prevCount / 2)
    }
    
    return (
        <div>
            <h1>{count}</h1>
            <button onClick={increment}>Increment</button>
            <button onClick={decrement}>Decrement</button>
            <button onClick={double}>Double Count</button>
            <button onClick={half}>Half Count</button>
        </div>
    )
}

// class App extends React.Component {
//     constructor() {
//         super()
//         this.state = {
//             count: 0,
//             answer: "Yes"
//         }
//     }
    
//     render() {
//         return (
//             <div>
//                 <h1>{this.state.count}</h1>
//                 <button>Change!</button>
//             </div>
//         )
//     }
// }

export default App

-------------------------------------------------------------------------------------------------
useEffect()
import React, {useState, useEffect} from "react"
import randomcolor from "randomcolor"

function App() {
    const [count, setCount] = useState(0)
    const [color, setColor] = useState("")
    
    function increment() {
        setCount(prevCount => prevCount + 1)
    }
    
    function decrement() {
        setCount(prevCount => prevCount - 1)
    }
    
    useEffect(() => {
        setColor(randomcolor())
    }, [count])
    
    return (
        <div>
            <h1 style={{color:color}}>{count}</h1>
            <button onClick={increment}>Increment</button>
            <button onClick={decrement}>Decrement</button>
        </div>
    )
}

export default App

-------------------------------------------------------------------------------------------------
import React, {useState, useEffect} from "react"
import randomcolor from "randomcolor"

function App() {
    const [count, setCount] = useState(0)
    const [color, setColor] = useState("")
    
    useEffect(() => {
        const intervalId = setInterval(() => {
            setCount(prevCount => prevCount + 1)
        }, 1000)
        return () => clearInterval(intervalId)
    }, [])
    
    useEffect(() => {
        setColor(randomcolor())
    }, [count])
    
    return (
        <div>
            <h1 style={{color: color}}>{count}</h1>
        </div>
    )
}

export default App

-------------------------------------------------------------------------------------------------
import React, {Component} from "react"

/**
 * Challenge: Wire up the partially-finished travel form so that it works!
 * Remember to use the concept of controlled forms
 * https://reactjs.org/docs/forms.html
 * 
 * All information should be populating the text below the form in real-time
 * as you're filling it out
 * 
 * This exercise is adapted from the V School curriculum on vanilla JS forms:
 * https://coursework.vschool.io/travel-form/
 * 
 * All of our challenges and learning resources are open for the public
 * to play around with and learn from at https://coursework.vschool.io
 */

class App extends Component {
    constructor() {
        super()
        this.state = {
            firstName: "",
            lastName: "",
            age:"",
            gender: "",
            destination: "",
            isVegetarian: false,
            isVegan: false,
            isPeanut: false,
            isKosher:false,
            isDairyFree: false
            }
        this.handleChange = this.handleChange.bind(this)
    }
    
    handleChange(event) {
        const {name, value, type, checked} = event.target
        type === "checkbox" 
        ? 
        this.setState({ 
            [name]: checked 
            }) 
        : 
            this.setState({ 
                [name]: value 
        })
    }
    
    render() {
        return (
            <main>
                <form>
                    <p>First Name :</p>
                    <input 
                        name="firstName" 
                        value={this.state.firstName} 
                        onChange={this.handleChange} 
                        placeholder="First Name" 
                    />
                    <p>Last Name :</p>
                    <input 
                        name="lastName" 
                        value={this.state.lastName} 
                        onChange={this.handleChange} 
                        placeholder="Last Name" 
                    />
                    <p>Age :</p>
                    <input 
                        name="age" 
                        value={this.state.age} 
                        onChange={this.handleChange} 
                        placeholder="Age" 
                    />
                    
                    {/* Create radio buttons for gender here */}
                <h4>Please select your gender</h4>
                <label>
                    <input 
                        type="radio" 
                        name="gender"
                        value="male"
                        checked={this.state.gender === "male"}
                        onChange={this.handleChange}
                    /> Male
                </label>
                <br />
                <label>
                    <input 
                        type="radio" 
                        name="gender"
                        value="female"
                        checked={this.state.gender === "female"}
                        onChange={this.handleChange}
                    /> Female
                </label>
                <br />
                <label>
                    <input 
                        type="radio" 
                        name="gender"
                        value="other"
                        checked={this.state.gender === "other"}
                        onChange={this.handleChange}
                    /> Other
                </label>
                    <br />
                    
                    {/* Create select box for location here */}
                <h4>Where do you wish to fly</h4>

                <select 
                    value={this.state.destination}
                    onChange={this.handleChange}
                    name="destination"
                >
                    <option value="philadelphia">Philadelphia</option>
                    <option value="sanFran">San Francisco</option>
                    <option value="portland">Portland</option>
                    <option value="atlanta">Atlanta</option>
                    <option value="lax">Los Angeles</option>
                </select>
                <br />
                    {/* Create check boxes for dietary restrictions here */}
                <h4>Please check for any dietary restrictions</h4>
                <label>
                    <input 
                        type="checkbox"
                        name="isVegetarian"
                        checked={this.state.isVegetarian}
                        onChange={this.handleChange}
                    /> Vegetarian
                </label>
                <br />
                <label>
                    <input 
                        type="checkbox" 
                        name="isVegan"
                        checked={this.state.isVegan}
                        onChange={this.handleChange}
                    /> Vegan
                </label>
                <br />
                <label>
                    <input 
                        type="checkbox" 
                        name="isPeanut"
                        checked={this.state.isPeanut}
                        onChange={this.handleChange}
                    /> Peanut Allergy
                </label>
                <br />
                <label>
                    <input 
                        type="checkbox" 
                        name="isKosher"
                        checked={this.state.isKosher}
                        onChange={this.handleChange}
                    /> Kosher
                </label>
                 <br />
                 <label>
                    <input 
                        type="checkbox" 
                        name="isDairyFree"
                        checked={this.state.isDairyFree}
                        onChange={this.handleChange}
                    /> Dairy Free
                </label>
                <br />
                <br />

                    
                    <button>Submit</button>
                </form>
                <hr />
                <h2>Entered information:</h2>
                <p>Your name: {this.state.firstName}{" "}{this.state.lastName}</p>
                <p>Your age: {this.state.age}</p>
                <p>Your gender: {this.state.gender}</p>
                <p>Your destination: {this.state.destination}</p>
                <p>Your dietary restrictions: </p>
                <p>Vegetarian: {this.state.isVegetarian ? "Yes" : "No"}</p>
                <p>Vegan: {this.state.isVegan ? "Yes" : "No"}</p>
                <p>Peanut Allergy: {this.state.isPeanut ? "Yes" : "No"}</p>
                <p>Kosher: {this.state.isKosher ? "Yes" : "No"}</p>
                <p>Dairy Free: {this.state.isDairyFree ? "Yes" : "No"}</p>
            </main>
        )
    }
}

export default App

-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

